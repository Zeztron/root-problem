"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var readline_1 = __importDefault(require("readline"));
var util_1 = require("./util");
var inputFile = process.argv[2];
var readInterface = readline_1.default.createInterface({
    input: fs_1.default.createReadStream(process.cwd() + "/" + inputFile),
});
// Representing a string array of all of the drivers - I'll need to keep track of the drivers
var drivers = [];
// This will hold the report generated by the generateReport method.
var trips = [];
// This will get called for each line within the given input.
readInterface.on('line', function (data) {
    var eachLine = data.toString().split(' ');
    var command = eachLine[0], rest = eachLine.slice(1);
    if (command === 'Driver') {
        drivers.push.apply(drivers, rest);
    }
    else
        util_1.insertTrip(rest, trips);
});
// This will get executed when all of the lines in the input are read.
readInterface.on('close', function () {
    var filteredResults = util_1.filterResults(trips);
    var finalOutput = util_1.generateTripReport(filteredResults, drivers);
    finalOutput.forEach(function (trip) {
        if (!trip.distance || !trip.speed) {
            console.log(trip.name + ": 0 miles");
        }
        else {
            console.log(trip.name + ": " + Math.round(trip.distance) + " miles @ " + Math.round(trip.speed) + " mph");
        }
    });
});
