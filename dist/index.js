"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var readline_1 = __importDefault(require("readline"));
var util_1 = require("./util");
var inputFile = process.argv[2];
// Just for this problem we'll only accept .txt files
if (!inputFile.endsWith('.txt'))
    throw new Error('Input file must end with .txt');
var readInterface = readline_1.default.createInterface({
    input: fs_1.default.createReadStream(process.cwd() + "/" + inputFile),
});
// Representing a string array of all of the drivers - I'll need to keep track of the drivers
var drivers = [];
// Holds the report generated by the insertTrip method.
var trips = [];
// This will get executed for each line within the given input.
readInterface.on('line', function (data) {
    var eachLine = data.toString().split(' ');
    var command = eachLine[0], rest = eachLine.slice(1);
    // Check to see if the Command actually starts with Driver or Trip
    if (command !== 'Driver' && command !== 'Trip')
        throw new Error("Each command must begin with 'Driver' or 'Trip'. - Please check your input file");
    if (command === 'Driver')
        drivers.push.apply(drivers, rest);
    else
        util_1.insertTrip(rest, trips);
});
// This will get executed when all of the lines in the input are read.
readInterface.on('close', function () {
    // First I'd like to see if there is a Trip for a Driver that doesn't exist before doing anything else.
    // I suppose ideally I'd check the database to see if that driver is there before creating that driver's trip.
    // But just for this problem I'll just make it so that the Driver has to be created first using the Driver command.
    var driversWithTrips = trips.map(function (result) { return result.name; });
    driversWithTrips.forEach(function (driver) {
        if (!drivers.includes(driver)) {
            throw new Error("Inserted Trip for " + driver + " but this driver is nowhere to be found. Please add in " + driver + ".");
        }
    });
    // Append all trips of the same driver into one Trip result
    var completeTrips = util_1.appendTrips(trips);
    // Generate the final trip report that satisfies the output criteria. Sort by distance.
    var finalOutput = util_1.generateTripReport(completeTrips, drivers);
    finalOutput.forEach(function (trip) {
        if (!trip.distance || !trip.speed || trip.speed < 5 || trip.speed > 100) {
            console.log(trip.name + ": 0 miles");
        }
        else {
            console.log(trip.name + ": " + trip.distance + " miles @ " + trip.speed + " mph");
        }
    });
});
