import fs from 'fs';
import readLine from 'readline';
import Trip from './interfaces/Trip';

import { generateTripReport, appendTrips, insertTrip } from './util';

const inputFile = process.argv[2];

// Just for this problem we'll only accept .txt files
if (!inputFile.endsWith('.txt'))
  throw new Error('Input file must end with .txt');

const readInterface = readLine.createInterface({
  input: fs.createReadStream(`${process.cwd()}/${inputFile}`),
});

// Representing a string array of all of the drivers - I'll need to keep track of the drivers
const drivers: string[] = [];

// Holds the report generated by the insertTrip method.
const trips: Trip[] = [];

// This will get executed for each line within the given input.
readInterface.on('line', (data) => {
  const eachLine = data.toString().split(' ');

  const [command, ...rest] = eachLine;

  // Check to see if the Command actually starts with Driver or Trip
  if (command !== 'Driver' && command !== 'Trip')
    throw new Error(
      "Each command must begin with 'Driver' or 'Trip'. - Please check your input file"
    );

  if (command === 'Driver') drivers.push(...rest);
  else insertTrip(rest, trips);
});

// This will get executed when all of the lines in the input are read.
readInterface.on('close', () => {
  // First I'd like to see if there is a Trip for a Driver that doesn't exist before doing anything else.
  // I suppose ideally I'd check the database to see if that driver is there before creating that driver's trip.
  // But just for this problem I'll just make it so that the Driver has to be created first using the Driver command.
  const driversWithTrips = trips.map((result: Trip) => result.name);
  driversWithTrips.forEach((driver) => {
    if (!drivers.includes(driver)) {
      throw new Error(
        `Inserted Trip for ${driver} but this driver is nowhere to be found. Please add in ${driver}.`
      );
    }
  });

  // Append all trips of the same driver into one Trip result
  const completeTrips: Trip[] = appendTrips(trips);

  // Generate the final trip report that satisfies the output criteria. Sort by distance.
  const finalOutput: Trip[] = generateTripReport(completeTrips, drivers);

  finalOutput.forEach((trip: Trip) => {
    if (!trip.distance || !trip.speed || trip.speed < 5 || trip.speed > 100) {
      console.log(`${trip.name}: 0 miles`);
    } else {
      console.log(`${trip.name}: ${trip.distance} miles @ ${trip.speed} mph`);
    }
  });
});
