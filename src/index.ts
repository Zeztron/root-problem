import fs from 'fs';
import readLine from 'readline';
import Trip from './interfaces/Trip';

import { generateTripReport, filterResults, insertTrip } from './util';

const inputFile = process.argv[2];

const readInterface = readLine.createInterface({
  input: fs.createReadStream(`${process.cwd()}/${inputFile}`),
});

// Representing a string array of all of the drivers - I'll need to keep track of the drivers
let drivers: string[] = [];

// This will hold the report generated by the generateReport method.
let trips: Trip[] = [];

// This will get called for each line within the given input.
readInterface.on('line', (data) => {
  const eachLine = data.toString().split(' ');

  const [command, ...rest] = eachLine;
  if (command === 'Driver') {
    drivers.push(...rest);
  } else insertTrip(rest, trips);
});

// This will get executed when all of the lines in the input are read.
readInterface.on('close', () => {
  const filteredResults: Trip[] = filterResults(trips);
  const finalOutput: Trip[] = generateTripReport(filteredResults, drivers);

  finalOutput.forEach((trip: Trip) => {
    if (!trip.distance || !trip.speed) {
      console.log(`${trip.name}: 0 miles`);
    } else {
      console.log(
        `${trip.name}: ${Math.round(trip.distance)} miles @ ${Math.round(
          trip.speed
        )} mph`
      );
    }
  });
});
